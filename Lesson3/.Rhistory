demo()
help.start()
23 -> a
attributes(x)
attributes(x)
clear
cls
clr
x <- 1
str(x)
x <- 2
chr_var <- c("these are", "some strings")
dbl_var <- c(1, 2.5, 4.5)
dbl_var <- c(1, 2.5, 4.5)
# With the L suffix, you get an integer rather than a double
int_var <- c(1L, 6L, 10L)
# Use TRUE and FALSE (or T and F) to create logical vectors
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
c(1, c(2, c(3, 4)))
## [1] 1 2 3 4
# the same as
c(1, 2, 3, 4)
## [1] 1 2 3 4
int_var <- c(1L, 6L, 10L)
typeof(int_var)
## [1] "integer"
is.integer(int_var)
## [1] TRUE
is.atomic(int_var)
## [1] TRUE
str(c("a"), 1)
str(c("a", 1))
str(c("a", 1, 2.5))
str(c(c("a", 1, 2.5), c(TRUE, 1L)))
str(c("a", 1, 2.5), c(TRUE, 1L))
y <- c(list(1, 2), c(3, 4))
str(y)
y <- c(list("a", 2), c(3, 4))
str(y)
y <- 1:10
attr(y, "my_attribute")
attr(y, "my_attribute") <- "This is a vectory"
y <- 1:10
attr(y, "my_attribute") <- "This is a vectory"
attr(y, "my_attribute")
str(attributes(y))
y <- 1:10
attr(y, "my_attribute") <- "This is a vectory"
attr(y, "my_attribute_int_no") <- 12
attr(y, "my_attribute")
attr(y, "my_attribute_int_no")
str(attributes(y))
attributes(y)
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(y)
table(sex_factor)
class(sex_char)
class(sex_factor)
sex_factor
sex_char
head(iris, n = 3)
head(iris, )
head(iris, n = 8)
ls
setwd("~workspace/R/Lesson1")
setwd("~workspace/R/Lesson1/")
setwd("~/workspace/R/Lesson1/")
setwd("~/workspace/R/Lesson3/")
new_sample <- c(4.8, 2.9, 3.7, 1.7)
names(new_sample) <- c("Sepal.Lenght", "Sepal.Width", "Petal.Length", "Petal.Width")
new_sample
(iris_features <- iris[1:4])
(iris_features <- iris[1:5])
(iris_features <- iris[, ])
class(iris_features)
new_sample <- c(4.8, 2.9, 3.7, 1.7)
names(new_sample) <- c("Sepal.Lenght", "Sepal.Width", "Petal.Length", "Petal.Width")
iris_features <- iris[1:4]
dist_eucl <- function(x1, x2) sqrt(sum()(x1 -x2) ^ 2)
distances <- apply(iris_features, 1, function(x) dist_eucl(x, new_sample))
new_sample <- c(4.8, 2.9, 3.7, 1.7)
names(new_sample) <- c("Sepal.Lenght", "Sepal.Width", "Petal.Length", "Petal.Width")
iris_features <- iris[1:4]
dist_eucl <- function(x1, x2) sqrt(sum((x1 -x2) ^ 2))
distances <- apply(iris_features, 1, function(x) dist_eucl(x, new_sample))
class(distances)
distances
iris_features
distances_sorted <- sort(distances, index.return = T)
distances_sorted
distances_sorted <- sort(distances, index.return = F)
distances_sorted
distances_sorted <- sort(distances, index.return = T)
distances_sorted
str(distances_sorted)
nn_5 <- iris[distances_sorted$ix[1:5], ]
nn_5
