demo()
help.start()
23 -> a
attributes(x)
attributes(x)
clear
cls
clr
x <- 1
str(x)
x <- 2
chr_var <- c("these are", "some strings")
dbl_var <- c(1, 2.5, 4.5)
dbl_var <- c(1, 2.5, 4.5)
# With the L suffix, you get an integer rather than a double
int_var <- c(1L, 6L, 10L)
# Use TRUE and FALSE (or T and F) to create logical vectors
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
c(1, c(2, c(3, 4)))
## [1] 1 2 3 4
# the same as
c(1, 2, 3, 4)
## [1] 1 2 3 4
int_var <- c(1L, 6L, 10L)
typeof(int_var)
## [1] "integer"
is.integer(int_var)
## [1] TRUE
is.atomic(int_var)
## [1] TRUE
str(c("a"), 1)
str(c("a", 1))
str(c("a", 1, 2.5))
str(c(c("a", 1, 2.5), c(TRUE, 1L)))
str(c("a", 1, 2.5), c(TRUE, 1L))
y <- c(list(1, 2), c(3, 4))
str(y)
y <- c(list("a", 2), c(3, 4))
str(y)
y <- 1:10
attr(y, "my_attribute")
attr(y, "my_attribute") <- "This is a vectory"
y <- 1:10
attr(y, "my_attribute") <- "This is a vectory"
attr(y, "my_attribute")
str(attributes(y))
y <- 1:10
attr(y, "my_attribute") <- "This is a vectory"
attr(y, "my_attribute_int_no") <- 12
attr(y, "my_attribute")
attr(y, "my_attribute_int_no")
str(attributes(y))
attributes(y)
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(y)
table(sex_factor)
class(sex_char)
class(sex_factor)
sex_factor
sex_char
head(iris, n = 3)
head(iris, )
head(iris, n = 8)
ls
ibrary('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>%
html_attr("data-atp") %>%
gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>%
html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>%
html_attr("title") %>%
as.numeric
volume <- md %>% html_nodes("span>em") %>%
html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>%
html_attr("data-atp") %>%
gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>%
html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>%
html_attr("title") %>%
as.numeric
volume <- md %>% html_nodes("span>em") %>%
html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
md <- gurl %>%
read_html(encoding="GBK") %>% # 读取gurl的链接，指定编码为gbk
html_nodes("div.product-iWrap")  # 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
md <- gurl %>% read_html(encoding="GBK") %>% html_nodes("div.product-iWrap")
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
setwd("/workspace/R/Lesson4")
setwd("~/workspace/R/Lesson4")
library("xml2")
library("rvest")
gurl <- "https://music.163.com/#/discover/toplist?id=3778678"
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_nodes("div.even")
songName <- md %>% html_nodes("div.ttc")
rawData <- gurl
rawData <- gurl %>% read_html(encoding = "utf-8")
rawData <- gurl %>% read_html(encoding = "GBK")
source('~/workspace/R/Lesson4/chapter2.R', echo=TRUE)
rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
sellerNick <- rawData %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
rawData <- gurl %>% read_html(encoding = "GBK")
library("xml2")
library("rvest")
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# gurl <- "https://list.tmall.com/search_product.htm?q=%C8%FD%D0%C7s10&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
md <- gurl %>% read_html(encoding="GBK") %>% html_nodes("div.product-iWrap")
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
library("xml2")
library("rvest")
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# gurl <- "https://list.tmall.com/search_product.htm?q=%C8%FD%D0%C7s10&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
# rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
library("xml2")
library("rvest")
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# gurl <- "https://list.tmall.com/search_product.htm?q=%C8%FD%D0%C7s10&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
# rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
library("xml2")
library("rvest")
# gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# gurl <- "https://list.tmall.com/search_product.htm?q=%C8%FD%D0%C7s10&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
gurl <- "https://music.163.com/#/discover/toplist?id=3778678"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
# md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
# rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("tr.even")
rawData <- gurl %>% read_html(encoding = "GBK")
gurl <- "https://music.163.com/#/discover/toplist?id=3778678"
library("xml2")
library("rvest")
# gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# gurl <- "https://list.tmall.com/search_product.htm?q=%C8%FD%D0%C7s10&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
gurl <- "https://music.163.com/#/discover/toplist?id=3778678"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
# md      <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
# rawData <- gurl %>% read_html(encoding = "GBK") %>% html_nodes("div.product-iWrap")
rawData <- gurl %>% read_html(encoding = "GBK")
rawData <- gurl %>% read_html(encoding = "utf-8")
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_table(tr.even)
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_table(tr.even )
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_table("tr.even")
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_table("table.m-table")
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_table("table.m-table")
rawData <- gurl %>% read_html(encoding = "utf-8")
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_node("table.mtable")
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_node("table.m-table")
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_node("table.m-table") %>% html_table(header = FALSE)
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_node("table.m-table") %>% html_table(header = TRUE)
rawData <- gurl %>% read_html(encoding = "utf-8") %>% html_node("table.m-table") %>% html_table(fill = TRUE)
View(rawData)
