chr_var <- c("these are", "some strings")
dbl_var <- c(1, 2.5, 4.5)
dbl_var <- c(1, 2.5, 4.5)
# With the L suffix, you get an integer rather than a double
int_var <- c(1L, 6L, 10L)
# Use TRUE and FALSE (or T and F) to create logical vectors
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
c(1, c(2, c(3, 4)))
## [1] 1 2 3 4
# the same as
c(1, 2, 3, 4)
## [1] 1 2 3 4
int_var <- c(1L, 6L, 10L)
typeof(int_var)
## [1] "integer"
is.integer(int_var)
## [1] TRUE
is.atomic(int_var)
## [1] TRUE
str(c("a"), 1)
str(c("a", 1))
str(c("a", 1, 2.5))
str(c(c("a", 1, 2.5), c(TRUE, 1L)))
str(c("a", 1, 2.5), c(TRUE, 1L))
y <- c(list(1, 2), c(3, 4))
str(y)
y <- c(list("a", 2), c(3, 4))
str(y)
y <- 1:10
attr(y, "my_attribute")
attr(y, "my_attribute") <- "This is a vectory"
y <- 1:10
attr(y, "my_attribute") <- "This is a vectory"
attr(y, "my_attribute")
str(attributes(y))
y <- 1:10
attr(y, "my_attribute") <- "This is a vectory"
attr(y, "my_attribute_int_no") <- 12
attr(y, "my_attribute")
attr(y, "my_attribute_int_no")
str(attributes(y))
attributes(y)
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(y)
table(sex_factor)
class(sex_char)
class(sex_factor)
sex_factor
sex_char
head(iris, n = 3)
head(iris, )
head(iris, n = 8)
ls
ibrary('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>%
html_attr("data-atp") %>%
gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>%
html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>%
html_attr("title") %>%
as.numeric
volume <- md %>% html_nodes("span>em") %>%
html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>%
html_attr("data-atp") %>%
gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>%
html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>%
html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>%
html_attr("title") %>%
as.numeric
volume <- md %>% html_nodes("span>em") %>%
html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
md <- gurl %>%
read_html(encoding="GBK") %>% # 读取gurl的链接，指定编码为gbk
html_nodes("div.product-iWrap")  # 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library('xml2')
library('rvest')
gurl <- "https://list.tmall.com/search_product.htm?q=%C9%AD%B1%C8%B0%C2&type=p&vmarket=&spm=875.7931836%2FB.a2227oh.d100&from=mallfp..pc_1_searchbutton"
# 读取gurl的链接，指定编码为gbk
# 筛选出所有包含在<div class="product-iWrap">...</div>块的内容
md <- gurl %>% read_html(encoding="GBK") %>% html_nodes("div.product-iWrap")
# 抓取卖家昵称和ID
sellerNick <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-nick")
sellerId <- md %>% html_nodes("p.productStatus>span[data-atp]") %>% html_attr("data-atp") %>% gsub(pattern="^.*,",replacement="")
# 抓取宝贝名称等数据
itemTitle <- md %>% html_nodes("p.productTitle>a[title]") %>% html_attr("title")
itemId <- md %>% html_nodes("p.productStatus>span[class]") %>% html_attr("data-item")
price <- md %>% html_nodes("em[title]") %>% html_attr("title") %>% as.numeric
volume <- md %>% html_nodes("span>em") %>% html_text
# 最后保存成数据框对象并存盘备用，以及写入csv文件
options(stringsAsFactors = FALSE) # 设置字符串不自动识别为因子
itemData <- data.frame(sellerNick=sellerNick,
sellerId=sellerId,itemTitle=itemTitle,
itemId=itemId,
price=price,
volume=volume)
save(itemData, file = "./itemData.rData")
write.csv(itemData, file = "./itemData.csv")
library("ODBC")
library("ODBC")
x <- array(1:5, c(6,7,8))
str(x)
structure(x)
x <- array(1:5, c(1,1,5))
str(x)
structure(x)
x <- array(1:5, c(2,2,5))
structure(x)
y <- array(1:6)
structure(y)
y <- array(1:6, 1:2)
structure(y)
y <- array(1:6, 2)
structure(y)
y <- array(1:6, 3)
structure(y)
y <- array(1:6, 8)
structure(y)
y <- array(1:6, 1:6)
structure(y)
y <- array(1:6, 1:2)
structure(y)
y <- array(1:6, 1:3)
structure(y)
y <- array(1:6, 1:2)
dim(y)
y <- array(1:6, 1:3)
dim(y)
structure(y)
y <- array(1:6, 1:4)
structure(y)
y <- array(1:6, 1:3)
structure(y)
y <- array(1:6, c(1,2,3))
structure(y)
y <- array(1:6, c(2,2,3))
structure(y)
y <- array(1:6, c(2,2,2))
structure(y)
y <- array(1:6, c(1,1,1))
structure(y)
y <- array(1:9, c(1,1,1))
structure(y)
y <- array(1:9, c(3,3,3))
structure(y)
y <- array(1:9, 1:3
)
structure(y)
y <- array(1:9, c(3,3,3))
structure(y)
y <- array(1:9, c(1,2,3))
structure(y)
y <- array(1:9, 1:3)
structure(y)
y <- array(1:9, 1,2,3)
x <- c(1,2,3)
structure(x)
x <- 1:3
structure(x)
x <- c(3,3,3)
structure(x)
y <- array(1:9, 1:3)
structure(x)
structure(y)
y <- array(1:9, c(1,2,3))
structure(y)
y <- array(1:8, c(1,2,3))
structure(y)
y <- array(1, c(1,2,3))
structure(y)
y <- array(1:3, c(1,2,3))
structure(y)
y <- array(1:9, c(1,2,3))
structure(y)
y <- array(1:4, c(1,2,3))
structure(y)
y <- array(1:9, c(1,2,3))
structure(y)
?help.array
help.array
y <- array(1:9, c(1,2))
help.array
structure(y)
y <- array(1:9, c(2,2))
structure(y)
y <- array(1:9, c(1,2))
structure(y)
y <- array(1:9, c(1,2,3))
structure(y)
y <- array(1:9, c(2,2,3))
structure(y)
y <- array(1:9, c(3,2,3))
structure(y)
z <- (1:5, c(1,1,5))
z <- array(1:5, c(1,1,5))
y <- array(1:5, c(1,5,1))
x <- array(1:5, c(5,1,1))
structure(x)
structure(y)
structure(z)
structure(x)
structure(x)
x <- array(1:5, c(5,1,1))
structure(x)
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
structure(df)
df <- data.frame(x = 1:3, y = c("a", "b", "c"), z = list("hello", 10L, T))
structure(df)
df <- data.frame(x = 1:3, y = c("a", "b", "c"), z = c("hello", 10L, T))
structure(df)
str(df)
df <- data.frame(x = 1:3, y = c("a", "b", "c"), z = c("hello", 10L, T))
df <- data.frame(x = 1:3, y = c("a", "b", "c"), z = c("hello", 10L, T), stringsAsFactors = F)
str(df)
df <- data.frame(x = 1:3, y = c("a", "b", "c"), z = list("hello", 10L, T), stringsAsFactors = F)
str(df)
df <- data.frame(x = 1:3, y = c("a", "b", "c"), z = c("hello", 10L, T), stringsAsFactors = F)
str(df)
dim(df)
typeof(df)
df <- data.frame(y = c("a", "b", "c"), z = c("hello", 10L, T), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T, 8), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T, 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T, 1:5), stringsAsFactors = F)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T, 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T, 1:2), stringsAsFactors = F)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, T, 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list("hello", 10L, c(T, F, F), 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list(list("hello", 12, T), 10L, c(T, F, F), 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list(list("hello", 12, T, 1:3), 10L, c(T, F, F), 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list(10L, c(T, F, F), 1:3), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list(10L, c(T, F, F), c(2,3,4)), stringsAsFactors = F)
structure(df)
df <- data.frame(list(1:4))
structure(df)
df <- data.frame(list(1:4, c(5,6,7,8)))
structure(df)
df <- data.frame(x = list(1:4, c(5,6,7,8)))
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list(10L, c(T, F, F), c(2,3,4)), stringsAsFactors = F)
structure(df)
df <- data.frame(y = c("a", "b", "c"), z = list(list(10L, 11L, 12L), c(T, F, F), c(2,3,4)), stringsAsFactors = F)
structure(df)
str(df)
df <- data.frame(y = c("a", "b", "c"), z = list(list(c(10L, 11L), 11L, 12L), c(T, F, F), c(2,3,4)), stringsAsFactors = F)
df <- data.frame(y = c("a", "b", "c"), z = list(list(10L, 11L, 12L), c(T, F, F), c(2,3,4)), stringsAsFactors = F)
str(df)
?order
setwd("~/workspace/R/Lesson5")
ecdict <- read.csv("ecdict.csv")
library(RODBC)
mycon<-odbcConnect("mysqlDSN",uid="root",pwd="123456")
sqlTables(mycon)
sqlTables(mycon)
sqlQuery(mycon, "select * from table cet6 where X < 8")
sqlQuery(mycon, "select * from cet6 where X < 8")
sqlQuery(mycon, "select X,words from cet6 where X < 8")
sqlQuery(mycon, "select X,word from cet6 where X < 8")
?sqlSave()
str(ecdict)
(ecdict[-(5,6,7,9,10)])
(ecdict[-c(5,6,7,9,10)])
ecdict[1,]
library(sqldf)
library(gsubfn)
library(proto)
library(RSQLite)
library(sqldf)
View(ecdict)
View(ecdict)
sqldf("select word,phonetic,definition,translation,tags from ecdict where word = '-ad'")
sqldf("select word,phonetic,definition,translation,tag from ecdict where word = '-ad'")
result <- sqldf("select word,phonetic,definition,translation,tag from ecdict where word = '-ad'")
View(result)
View(result)
result <- sqldf("select word,phonetic,definition,translation,tag from ecdict")
result <- sqldf("select word,phonetic,definition,translation,tag,exchange from ecdict")
?sqlSave()
sqlSave(mycon, result, tablename = ecdict, append = true)
result[1,]
result[c[1:10],]
result[c(1:10),]
result1w <- resut[c(1:10000),]
result1w <- result[c(1:10000),]
sqlSave(mycon, result1w, tablename = ecdict, append = true)
result1k <- result[c(1:1000),]
sqlSave(mycon, result1k, tablename = ecdict, append = true)
result1h <- result[c(1:100),]
sqlSave(mycon, result1h, tablename = ecdict, append = true)
result10 <- result[c(1:10),]
sqlSave(mycon, result10, tablename = ecdict, append = true)
sqlSave(mycon, result10, tablename = ecdict)
sqlSave(mycon, result10, tablename = "ecdict", append = true)
View(result10)
View(result10)
rm(result10)
rm(result1h)
rm(result1k)
sqlSave(mycon, result, tablename = "ecdict", append = true)
install.packages("RSQLite")
library(RSQLite)
db <- dbCanConnect(RSQLite(), dbname = "ecdict.sqlite")
db <- dbCanConnect(SQLite(), dbname = "ecdict.sqlite")
?dbWriteTable()
dbWriteTable(db, result)
dbWriteTable(db, result,row.name=F,overwrite=T)
resultMin <- sqldf("select word,phonetic,definition,tag from ecdict")
resultMin <- sqldf("select word,phonetic,definition,tag from ecdict")
library(RODBC)
resultMin <- sqldf("select word,phonetic,definition,tag from ecdict")
library(sqldf)
library(gsubfn)
library(proto)
resultMin <- sqldf("select word,phonetic,definition,tag from ecdict")
sqlSave(mycon, resultMin, tablename = "ecdict", append = true)
mycon<-odbcConnect("mysqlDSN",uid="root",pwd="123456")
sqlSave(mycon, resultMin, tablename = "ecdict", append = true)
View(resultMin)
View(resultMin)
resultMin[229284,]
resultMin[229284,3]
resultMin[229284,3] <- "Texting nothing but emojis back and forth between a friend or partner. Can sometimes be for humour or usually because you're bored."
resultMin[229284,3]
ecdict <- read.csv("ecdict.csv", stringsAsFactors=FALSE)
resultMin <- sqldf("select word,phonetic,definition,tag from ecdict")
resultMin[229284,3] <- "Texting nothing but emojis back and forth between a friend or partner. Can sometimes be for humour or usually because you're bored."
sqlSave(mycon, resultMin, tablename = "ecdict", append = true)
rm(result1w)
resultMin[0,]
resultMin[1,]
resultMin1thw <- resultMin[c(1:10000),]
sqlSave(mycon, resultMin1thw, tablename = "ecdict", append = true)
resultMin2thw <- resultMin[c(10001:20000),]
sqlSave(mycon, resultMin2thw, tablename = "ecdict", append = true)
sqlSave(mycon, resultMin2thw, tablename = "ecdict", append = "TRUE")
sqlSave(mycon, resultMin2thw, tablename = "ecdict", append = TRUE)
resultMin3thw <- resultMin[c(20001:30000),]
sqlSave(mycon, resultMin3thw, tablename = "ecdict", append = TRUE)
resultMin4thw <- resultMin[c(30001:40000),]
sqlSave(mycon, resultMin4thw, tablename = "ecdict", append = TRUE)
resultMin10thw <- resultMin[c(1:100000),]
sqlSave(mycon, resultMin10thw, tablename = "ecdict", append = TRUE)
sqlSave(mycon, resultMin10thw, tablename = "ecdict", append = TRUE)
sqlSave(mycon, resultMin10thw, tablename = "ecdict", append = TRUE)
resultMin20thw <- resultMin[c(100001:200000),]
rm(resultMin1thw)
rm(resultMin2thw)
rm(resultMin3thw)
rm(resultMin4thw)
sqlSave(mycon, resultMin20thw, tablename = "ecdict", append = TRUE)
resultMin30thw <- resultMin[c(200001:300000),]
sqlSave(mycon, resultMin30thw, tablename = "ecdict", append = TRUE)
resultMin40thw <- resultMin[c(300001:400000),]
sqlSave(mycon, resultMin40thw, tablename = "ecdict", append = TRUE)
resultMin50thw <- resultMin[c(400001:500000),]
sqlSave(mycon, resultMin50thw, tablename = "ecdict", append = TRUE)
resultMin60thw <- resultMin[c(500001:600000),]
sqlSave(mycon, resultMin60thw, tablename = "ecdict", append = TRUE)
resultMin70thw <- resultMin[c(600001:770611),]
sqlSave(mycon, resultMin70thw, tablename = "ecdict", append = TRUE)
ecdictMini <- read.csv("ecdict.mini.csv")
View(ecdictMini)
resultMinA <- subset(resultMin, word == "mere")
View(resultMinA)
resultMinA <- subset(resultMin, definition != "")
sqlSave(mycon, resultMinA, tablename = "ecdict_mini", append = TRUE)
resultMinA1000 <- resultMiniA[c(1:1000),]
resultMinA1000 <- resultMinA[c(1:1000),]
resultMinA2000 <- resultMinA[c(1001:2000),]
resultMinA3000 <- resultMinA[c(2001:3000),]
rm(resultMin10thw)
rm(resultMin20thw)
rm(resultMin30thw)
rm(resultMin40thw)
rm(resultMin50thw)
rm(resultMin60thw)
rm(resultMin70thw)
rm(resultMin80thw)
rm(resultMinA1000)
rm(resultMinA2000)
rm(resultMinA3000)
rm(ecidictMini)
rm(ecdictMini)
resultMinA10000 <- resultMinA[c(1:10000),]
resultMinA20000 <- resultMinA[c(10001:20000),]
resultMinA30000 <- resultMinA[c(20001:30000),]
resultMinA40000 <- resultMinA[c(30001:40000),]
resultMinA50000 <- resultMinA[c(40001:50000),]
resultMinA60000 <- resultMinA[c(50001:60000),]
resultMinA70000 <- resultMinA[c(60001:70000),]
resultMinA80000 <- resultMinA[c(70001:80000),]
resultMinA90000 <- resultMinA[c(80001:90000),]
resultMinA100000 <- resultMinA[c(90001:100000),]
resultMinA110000 <- resultMinA[c(100001:110000),]
resultMinA120000 <- resultMinA[c(110001:120000),]
resultMinA130000 <- resultMinA[c(120001:130000),]
resultMinA140000 <- resultMinA[c(130001:140000),]
resultMinA150000 <- resultMinA[c(140001:150000),]
resultMinA160000 <- resultMinA[c(150001:160000),]
resultMinA160884 <- resultMinA[c(160001:160884),]
sqlSave(mycon, resultMinA10000, tablename = "ecdict_mini_10000", append = TRUE)
sqlSave(mycon, resultMinA20000, tablename = "ecdict_mini_20000", append = TRUE)
sqlSave(mycon, resultMinA30000, tablename = "ecdict_mini_30000", append = TRUE)
sqlSave(mycon, resultMinA40000, tablename = "ecdict_mini_40000", append = TRUE)
sqlSave(mycon, resultMinA50000, tablename = "ecdict_mini_50000", append = TRUE)
sqlSave(mycon, resultMinA60000, tablename = "ecdict_mini_60000", append = TRUE)
sqlSave(mycon, resultMinA70000, tablename = "ecdict_mini_70000", append = TRUE)
sqlSave(mycon, resultMinA80000, tablename = "ecdict_mini_80000", append = TRUE)
sqlSave(mycon, resultMinA90000, tablename = "ecdict_mini_90000", append = TRUE)
sqlSave(mycon, resultMinA100000, tablename = "ecdict_mini_100000", append = TRUE)
sqlSave(mycon, resultMinA110000, tablename = "ecdict_mini_110000", append = TRUE)
sqlSave(mycon, resultMinA120000, tablename = "ecdict_mini_120000", append = TRUE)
sqlSave(mycon, resultMinA130000, tablename = "ecdict_mini_130000", append = TRUE)
sqlSave(mycon, resultMinA140000, tablename = "ecdict_mini_140000", append = TRUE)
sqlSave(mycon, resultMinA150000, tablename = "ecdict_mini_150000", append = TRUE)
sqlSave(mycon, resultMinA160000, tablename = "ecdict_mini_160000", append = TRUE)
sqlSave(mycon, resultMinA160884, tablename = "ecdict_mini_160884", append = TRUE)
